#!/bin/bash
#
# bar - bar script using lemonbar

shopt -s nullglob extglob lastpipe

. theme

# Functions

desktop_label() {
    case $1 in
        web) printf ;;
        chat) printf ;;
        files) printf ;;
        # *) printf '%s' "$item";;
        *) printf '~';;
    esac
}

escape() {
    local -n var=$1
    var=${var//\%/%%\{\}}
}

trunc() {
    local -n var=$1
    local max_length=$2
    if (( ${#var} > max_length )); then
        var=${var::max_length/2}…${var:${#var} - (max_length - 1)/2}
    fi
}

pad() {
    local -n var=$1
    var=$padding$var$padding
}

icon_ramp() {
    local value=$1 index
    shift
    if [[ $1 == -u ]]; then
        shift
        index=$(( value*$#/100 + 1 ))
        (( index > $# )) && index=$#
        printf '%s\n' "${!index}"
    else
        while [[ $1 ]]; do
            if [[ ! $2 || $value -le $2 ]]; then
                printf '%s\n' "$1"
                return
            fi
            shift 2
        done
    fi
}

print_time() {
    local seconds=$1 minutes hours
    (( minutes = seconds / 60, seconds %= 60 ))
    (( hours = minutes / 60, minutes %= 60 ))
    (( hours )) && printf '%02d:' "$hours"
    printf '%02d:%02d\n' "$minutes" "$seconds"
}

# Variables

battery=(/sys/class/power_supply/BAT*)
home_ssid='NEUF_89B4'
default_layout=fr

padding='  '
bold=3

font_args=()
for f in "${bar_font[@]}"; do
    font_args+=(-o)
    case $f in
        *'lucy tewi'*|*'Dina'*)
            font_args+=(1);;
        *)
            font_args+=(0);;
    esac
    font_args+=(-f "$f")
done

# Set lemonbar to be just above the root window to prevent displaying over other windows
xdo above -t "$(xdo id -n root)" "$(xdo id -m -n lemonbar)" &

#
# Data feed
#

{

    # Set up a builtin-only sleep function
    exec {sleep_fd}<> <(:)
    sleep() {
        read -rt "${1:-0}" -u "$sleep_fd"
    }

    # Toggle the clock display format on USR1
    trap 'echo Ctoggle' USR1

    # Toggle the battery display format on USR2
    trap 'echo Ptoggle' USR2

    # Kill all child processes on exit
    trap 'kill $(jobs -p) &> /dev/null' EXIT

    # WM info
    bspc subscribe report &

    # Window title
    xtitle -sf 'T%s\n' &

    while true; do
        # Clock
        printf 'C\n'

        # Fcitx
        printf 'I%s\n' "$(fcitx-remote 2> /dev/null)"

        # Keyboard layout
        xkblayout-state print $'K%s\n'

        sleep 1
    done &

    # Power
    if [[ $battery ]]; then
        while true; do
            printf 'P\n'
            sleep 5
        done &
    fi

    # Backlight
    if backlight=(/sys/class/backlight/*); (( ${#backlight[@]} )); then
        udevadm monitor -u -s backlight |
        while
            printf 'B%s\n' "$(brightness)"
            read -r
        do :; done &
    fi

    # Sound
    stdbuf -oL alsactl monitor pulse |
    grep --line-buffered -i master |
    while
        printf 'S%s\n' "$(volume)"
        read -r
    do :; done &

    # Network
    ip -o monitor link |
    while
        wired=() wireless=() wireguard=()
        sleep 0.3
        ip -o address show up scope global |
        while read -r _ interface _; do
            case $interface in
                en*|eth*) wired+=("$interface");;
                wl*)      wireless+=("$interface");;
                wg*)      wireguard+=("$interface");;
            esac
        done
        parts=()
        for interface in "${wired[@]}"; do
            parts+=(D"$interface")
        done
        for interface in "${wireless[@]}"; do
            ssid=
            iw dev "$interface" info | while read -r field value; do
                if [[ $field == ssid ]]; then
                    printf -v ssid '%b' "$value"
                    break
                fi
            done
            parts+=(L"$interface,$ssid")
        done
        for interface in "${wireguard[@]}"; do
            parts+=(G"$interface")
        done
        if (( ${#parts[@]} )); then
            (IFS=:; printf 'N%s\n' "${parts[*]}")
        fi
        read -r
    do :; done &

    # Mail
    gmail 'G%s\n' &

    # Music
    mpc idleloop player |
    while
        printf 'M\n'
        read -r
    do :; done &

    # Wait
    until wait; do :; done

} |

#
# Parser
#

while read -rn 1 event; do
    case $event in
        W) # is for window manager
            wm=
            IFS=: read -ra parts
            for part in "${parts[@]}"; do
                type=${part::1}
                item=${part:1}
                if [[ ${type,,} == [fou] ]]; then
                    desktop=$item
                    item=$(desktop_label "$item")
                    pad item
                    item="%{A:bspc desktop -f $desktop:}%{A2:bspc node -d $desktop -f:}$item%{A}%{A}"
                    if [[ $desktop =~ ^[[:alpha:]]+$ ]]; then
                        item="%{A3:le $desktop:}$item%{A}"
                    else
                        item="%{A3:bspc desktop -f $desktop; le terminal:}$item%{A}"
                    fi
                    case $type in
                        F|O|U) item="%{B$background_alt}$item%{B-}";;&
                        f|F) item="%{F$foreground_alt}$item%{F-}";;&
                        u|U) item="%{F$color5}$item%{F-}";;&
                    esac
                    wm+=$item
                fi
            done
            ;;
        T) # is for title
            read -r title
            trunc title 50
            escape title
            if [[ $title ]]; then
                title=" $title"
                pad title
                title="%{A:bspc node -t ~floating:}%{A2:bspc node -c:}%{A3:bspc desktop -l next:}$title%{A}%{A}%{A}"
            fi
            ;;
        C) # is for clock
            read -r toggle
            if [[ $toggle == toggle ]]; then
                (( long_clock ^= 1 ))
            fi
            if (( long_clock )) ; then
                date_format="%a %-d %b %Y"
                time_format="%H:%M:%S"
            else
                date_format="%a %-d"
                time_format="%H:%M"
            fi
            printf -v clock " %($date_format %%{T$bold}$time_format%%{T-})T" -1
            pad clock
            clock="%{A:pkill -USR1 -P $$ -f $0 -o:}%{A3:urxvt -name calendar -g 64x9 -hold +bc -e cal -3:}$clock%{A}%{A}"
            ;;
        P) # is for power
            read -r toggle
            if [[ $toggle == toggle ]]; then
                (( long_battery ^= 1 ))
            fi
            status=$(< "$battery"/status)
            if [[ $status == Full ]]; then
                power=
            else
                (( percentage = $(< "$battery"/capacity) ))
                (( percentage > 100 )) && (( percentage = 100 ))
                icon=$(icon_ramp "$percentage" -u          )
                [[ $status == Charging ]] && icon+=
                power="$icon $percentage%"
                if (( long_battery )); then
                    power+=" $status"
                    (( voltage = $(< "$battery"/voltage_now) / 1000 ))
                    if (( present_rate = $(< "$battery"/power_now) / voltage )); then
                        (( remaining_capacity = $(< "$battery"/energy_now) / voltage ))
                        if [[ $status == Charging ]]; then
                            (( full_capacity = $(< "$battery"/energy_full) / voltage))
                            (( seconds_left = 3600 * (full_capacity - remaining_capacity) / present_rate ))
                        elif [[ $status == Discharging ]]; then
                            (( seconds_left = 3600 * remaining_capacity / present_rate ))
                        fi
                    fi
                    (( seconds_left )) && power+=" $(print_time "$seconds_left")"
                fi
                (( percentage <= 10 )) && [[ $status != Charging ]] && power="%{F$color1}$power%{F-}"
            fi
            pad power
            power="%{A:pkill -USR2 -P $$ -f $0 -o:}%{A3:power:}$power%{A}%{A}"
            ;;
        K) # is for keyboard
            read -r layout
            if [[ $layout == "$default_layout" ]]; then
                keyboard=
            else
                escape layout
                keyboard=" $layout"
                pad keyboard
                keyboard="%{A4:xkblayout-state set +1:}%{A5:xkblayout-state set -1:}$keyboard%{A}%{A}"
            fi
            ;;
        I) # is for input method
            read -r status
            if (( status )); then
                im=" fcitx"
                pad im
                im="%{A:fcitx-remote -t:}%{A2:le im:}%{A3:fcitx-configtool:}$im%{A}%{A}%{A}"
            else
                im=
            fi
            ;;
        B) # is for backlight
            read -r percentage
            brightness="$(icon_ramp "$percentage"  10  50 ) $percentage%"
            pad brightness
            brightness="%{A4:brightness +:}%{A5:brightness -:}$brightness%{A}%{A}"
            ;;
        S) # is for sound
            IFS=: read -r percentage mute
            if [[ $mute == yes ]]; then
                sound=
            else
                sound="$(icon_ramp "$percentage"  10  50 ) $percentage%"
            fi
            pad sound
            sound="%{A:le volume:}%{A3:volume toggle:}%{A4:volume +2:}%{A5:volume -2:}$sound%{A}%{A}%{A}%{A}"
            ;;
        N) # is for network
            IFS= read -r parts
            network=
            while read -rn 1 type; do
                case $type in
                    D)
                        read -d : interface
                        network+="%{A3:sudo systemctl restart netctl-ifplugd@$interface:}%{A}"
                        ;;
                    L)
                        IFS=, read -d : interface ssid
                        # [[ $ssid == $home_ssid ]] && ssid=
                        # trunc ssid 15
                        # escape ssid
                        network+="%{A:le wifi:}%{A3:sudo systemctl restart netctl-auto@$interface:}%{A}%{A}"
                        ;;
                    G)
                        read -d : interface
                        network+="%{A3:sudo systemctl restart wg-quick@$interface:}%{A}"
                        ;;
                esac
            done <<< "$parts:"
            pad network
            ;;
        G) # is for Gmail
            mail=
            read -r count
            if (( count )); then
                mail="%{F$color5}%{F-} $count"
                pad mail
                mail="%{A:le mail:}$mail%{A}"
            fi
            ;;
        M) # is for music
            song=
            song_file=$(mpc current -f '%file%')
            if [[ $song_file ]]; then
                song_artist=$(mpc current -f '%artist%')
                song_title=$(mpc current -f '%title%')
                if [[ $song_title ]]; then
                    trunc song_title 30
                    escape song_title
                    song=$song_title
                    if [[ $song_artist ]]; then
                        trunc song_artist 20
                        escape song_artist
                        song="%{T$bold}$song_artist%{T-} - $song"
                    fi
                else
                    trunc song_file 50
                    escape song_file
                    song=$song_file
                fi
                song=" $song"
                pad song
                song="%{A:music:}%{A2:mpc clear:}%{A3:mpc toggle:}$song%{A}%{A}%{A}"
            fi
            ;;
    esac

    # Rendering

    left=$wm$title
    center=
    right=$song$mail$network$sound$brightness$im$keyboard$power$clock
    printf '%%{l}%s%%{c}%s%%{r}%s\n' "$left" "$center" "$right"
done |

#
# Bar
#

lemonbar -g x32 \
         -a 255 \
         -B "$background" \
         -F "$foreground" \
         "${font_args[@]}" |

#
# Bash
#

while read -r; do
    eval "$REPLY" &
done
