#!/usr/bin/env bash
#
# shoot - shoot and record the screen

shopt -s nullglob

# If currently recording, stop it

if pids=$(pgrep -xd, "${0##*/}"); then
    if pkill -xP "$pids" -int ffmpeg; then
        exit
    fi
fi

# Cleanup

thumbnail= tmpvideo=

cleanup() {
    [[ -e $thumbnail ]] && rm -f -- "$thumbnail"
    [[ -e $tmpvideo  ]] && rm -f -- "$tmpvideo"
}

trap cleanup exit

# Command line options

video=0 rename=0 crop=0 upload=0

while getopts :vncu o; do
    case $o in
        v) video=1;;
        n) rename=1;;
        c) crop=1;;
        u) upload=1;;
    esac
done

shift "$(( OPTIND - 1 ))"

# Target name

if (( $# )); then
    target=$1
elif (( rename )); then
    target=~/$(rofi -dmenu -p name -lines 0 -width 500)
else
    n=1
    printf -v date '%(%F)T' -1
    target=~/shot-$date
    while
        conflicts=("$target".*)
    (( ${#conflicts[@]} )); do
        target=~/shot-$date-$(( n++ ))
    done
fi

if [[ ${target##*/} != *.* ]]; then
    if (( video )); then
        target+=.webm
    else
        target+=.png
    fi
fi

# Crop

offset= geometry=
if (( crop )); then
    if (( video )); then
        slop=$(slop -f '+%x,%y %wx%h') || exit 1
        read -r offset geometry <<< "$slop"
    else
        geometry=$(slop) || exit 1
    fi
fi

# Shoot

thumbnail=$(mktemp --suffix .png) || exit 1

if (( video )); then
    # Use the screen dimensions by default
    if [[ ! $geometry ]]; then
        geometry=$(bspc query -T -m | jq -r '.rectangle | "\(.width)x\(.height)"')
    fi

    # First encoding: lossless, fast, matroska
    tmpvideo=$(mktemp -p ~ --suffix .mkv) || exit 1
    trap 'rm -f -- "$tmpvideo"' exit
    ffmpeg -hide_banner -y -video_size "$geometry" -framerate 30 -f x11grab -i :0.0"$offset" -c:v libx264 -crf 0 -preset ultrafast "$tmpvideo"

    dunstify -t 10000 -i camera "Encoding..." "to $target" &

    # Second encoding: lossless, slow, webm
    ffmpeg -hide_banner -y -i "$tmpvideo" -c:v libvpx-vp9 -lossless 1 "$target"

    # Thumbnail
    ffmpegthumbnailer -i "$target" -o "$thumbnail" -s 300
else
    # Screenshot
    import -silent -window root ${geometry:+-crop "$geometry"} "$target"

    # Thumbnail
    convert "$target" -resize '300x300>' "$thumbnail"
fi

# Notify

if [[ $(dunstify -t 10000 -A open,open -I "$thumbnail" "Shot saved" "as $target") == open ]]; then
    exec xdg-open "$target" &> /dev/null
fi &

# Upload

if (( upload )); then
    upload -r "$target" &
fi

# Wait before deleting the thumbnail
wait
