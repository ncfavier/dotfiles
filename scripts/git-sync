#!/bin/bash
#
# git-sync - sync local repositories with a set of remotes
# TODO: move remote definitions to a config file

declare -A should_sync
for repo do should_sync[$repo]=1; done

declare -A remotes=()

# git.monade.li
while read -r repo; do
    name=${repo##*/} name=${name%.git}
    case $name in
        dotfiles) dir=~/.dots;;
        *) dir=~/git/$name;;
    esac
    remotes[$dir]=monade.li:${repo%.git}
done < <(ssh monade.li 'printf %s\\n /srv/git/*')

# GitHub
while read -r name && read -r url; do
    remotes[~/git/$name]=$url
done < <(curl -fsSL https://api.github.com/users/niiiil/repos |
         jq -r '.[] | .name, .ssh_url//.clone_url')

# AUR
while read -rn1 && read -r repo; do
    remotes[~/git/aur/$repo]=aur@aur.archlinux.org:$repo
done < <(ssh aur@aur.archlinux.org list-repos)

# Misc
remotes[~/.local/share/emojilib]='https://github.com/muan/emojilib'

for dir in "${!remotes[@]}"; do
    (( ! $# || should_sync[${dir##*/}] )) || continue
    printf '%s %s\n' "$(tput bold; tput setaf 2)==>$(tput sgr0)" "$dir"
    if [[ -d $dir/.git ]]; then
        git -C "$dir" pull --rebase
    else
        mkdir -p "$(dirname "$dir")"
        git clone "${remotes[$dir]}" "$dir"
    fi
done
