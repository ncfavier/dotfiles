" Defaults

source $VIMRUNTIME/defaults.vim

" Options

set autoindent
set autoread
set breakindent
set breakindentopt=shift:2
set clipboard=unnamedplus,exclude:cons\|linux
set expandtab
set formatoptions-=tro
set hidden
set hlsearch
set ignorecase
set incsearch
set modeline
set mouse=a
set number
set path=**
set shiftround
set shiftwidth=0
set smartindent
set softtabstop=4
set splitbelow
set splitright
set t_md=
set tabstop=4
set title
set ttimeoutlen=10
set ttymouse=urxvt
set whichwrap=b,s,<,>,[,]

set visualbell
set t_vb=

" Plugins

if g:loaded_plug
    call plug#begin('~/.vim/plugged')
        Plug 'scrooloose/nerdtree'
        Plug 'scrooloose/nerdcommenter'
        Plug 'lilydjwg/colorizer'
    call plug#end()
endif

" Variables

let mapleader = ','
let NERDTreeMinimalUI = 1
let NERDSpaceDelims = 1
let NERDDefaultAlign = 'left'
let NERDCommentEmptyLines = 1
let NERDToggleCheckAllLines = 1

" Mappings

map                      <Home>           ^
imap                     <Home>           <C-o><Home>
nnoremap <silent>        <Return>         :noh<Bar>echo<Return>
nnoremap                 p                ]p
vnoremap                 //               y/\V<C-r>=escape(@",'/\')<Return><Return>
nnoremap <silent>        <C-c>            :call NERDComment(0, 'toggle')<Return>
vnoremap <silent> <expr> <C-c>            (mode() ==# 'V' ? '' : 'V').":call NERDComment(0, 'toggle')<Return>"
noremap  <silent>        <C-n>            :NERDTreeToggle<Return>
noremap                  <C-p>            :find<Space>
cnoremap                 <C-p>            <Home>vert s<End>
noremap                  <C-Left>         <C-w>h
noremap                  <C-Right>        <C-w>l
noremap                  <C-Down>         <C-w>j
noremap                  <C-Up>           <C-w>k
noremap  <silent>        <C-t>            :ToggleTerm<Return>
tnoremap <silent>        <C-t>            <C-w>:ToggleTerm<Return>
noremap                  <F9><F9>         :make<Return>
noremap                  <F9>i            :make install<Return>
noremap                  <F9>c            :make clean<Return>
noremap                  <F9><Space>      :make<Space>
imap                     <F9>             <C-o><F9>
nnoremap <silent>        <Leader><Leader> :map <Leader><Return>
noremap  <silent>        <Leader>c        :call NERDComment(0, 'toggle')<Return>
nnoremap                 <Leader>i        :AddImport<Bar>SortImports<Return>
nnoremap                 <Leader>r        :%s///g<Left><Left>
nnoremap <silent>        <Leader>s        :sort<Return>
vnoremap <silent>        <Leader>s        :sort<Return>
nnoremap <silent>        <Leader>x        :!chmod +x %<Return>

" Autocommands

autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | quit | endif " quit if NERDTree is the last buffer
autocmd BufWritePre * %s/\s\+$//e " trim leading whitespace on save

autocmd BufNewFile,BufRead *bash_aliases,*bash_functions call dist#ft#SetFileTypeSH("bash")

" Commands

command! ToggleTerm call ToggleTerm()
command! SortImports 1/^import /,$?^import ?sort u /^import \+/ | nohlsearch
command! -nargs=* AddImport call AddImport(<f-args>)

" Functions

function! ToggleTerm()
    if &buftype == 'terminal'
        close
        return
    endif

    let terminal_windows = filter(getwininfo(), 'v:val.terminal')
    if !empty(terminal_windows)
        execute terminal_windows[0].winnr.'wincmd w'
        return
    endif

    let terminal_buffers = filter(getbufinfo(), 'getbufvar(v:val.bufnr, ''&buftype'') == ''terminal''')
    if !empty(terminal_buffers)
        execute 'botright sbuffer' terminal_buffers[0].bufnr
        return
    endif

    botright terminal ++close ++kill=term ++norestore
endfunction

function! AddImport(...)
    if !exists('$IMPORTPATH')
        echoerr 'IMPORTPATH not set'
        return
    endif

    let $TYPENAME = get(a:, 1, expand('<cword>'))
    let types = systemlist('IFS=: read -ra jars <<< "$IMPORTPATH"; for f in "${jars[@]}"; do jar -tf "$f" 2> /dev/null; done | sed -n ''/\<''"$TYPENAME"''\.class$/{s/\.class$//;s,/,.,g;p}''')

    if len(types) == 0
        return
    elseif len(types) == 1
        let type = types[0]
    else
        for i in range(len(types))
            echo i types[i]
        endfor
        let type = get(types, input('Which type do you want to import? '))
    endif

    let v:errmsg = ''
    silent! $?^import
    if v:errmsg != ''
        silent! $?^package
        normal o
    endif

    put ='import '.type.';'
endfunction
