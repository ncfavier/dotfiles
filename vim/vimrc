" Defaults

silent! source $VIMRUNTIME/defaults.vim

" Options

set autoindent
set autoread
set breakindent
set clipboard=unnamedplus,exclude:cons\|linux
set expandtab
set exrc
set formatoptions-=tro
set hidden
set hlsearch
set ignorecase
set incsearch
set modeline
set mouse=a
set nonumber
set path=**
set secure
set shiftround
set shiftwidth=0
set smartindent
set softtabstop=4
set splitbelow
set splitright
set t_md=
set tabstop=4
set title
set ttimeoutlen=10
set ttymouse=urxvt
set whichwrap=b,s,<,>,[,]

set visualbell
set t_vb=

if $TERM =~ 'rxvt'
    let &t_SI = "\<Esc>[5 q"
    let &t_EI = "\<Esc>[0 q"
    let &t_SR = "\<Esc>[3 q"
endif

colorscheme default
highlight LineNr ctermfg=8

" Plugins

try
    call plug#begin('~/.vim/plugged')
        Plug 'scrooloose/nerdtree'
        let NERDTreeMinimalUI = 1

        Plug 'scrooloose/nerdcommenter'
        let NERDSpaceDelims = 1
        let NERDDefaultAlign = 'left'
        let NERDCommentEmptyLines = 1
        let NERDToggleCheckAllLines = 1

        Plug 'tpope/vim-surround'

        Plug 'tpope/vim-fugitive'

        Plug 'lilydjwg/colorizer'

        Plug 'mhinz/vim-startify'
        let startify_custom_header = split(system('toilet -f mono12 vim'), '\n')
        let g:startify_files_number = 5
        let g:startify_lists = [
          \ { 'type': 'dir',   'header': ['Recent files in '.getcwd()] },
          \ { 'type': 'files', 'header': ['Recent files']              },
        \ ]
    call plug#end()
catch
endtry

" Mappings

let mapleader = ','

noremap           <Home>           ^
nnoremap <silent> <Return>         :noh<Bar>redraw!<Bar>echo<Return>
imap              <Home>           <C-o><Home>
inoremap <expr>   <Tab>            (col('.') == 1 \|\| getline('.')[:col('.')-2] =~ '^\s*$') ? "\<Tab>" : "\<C-n>"
inoremap          <C-f>            <C-x><C-f>
vmap              <Tab>            >
vmap              <S-Tab>          <
vnoremap          >                >gv
vnoremap          <                <gv
vnoremap          =                =gv
nnoremap          <Tab>            >>
nnoremap          <S-Tab>          <<
nnoremap <silent> <C-j>            mz:move +1<Return>==`z
nnoremap <silent> <C-k>            mz:move -2<Return>==`z
vnoremap <silent> <C-j>            :move '>+1<Return>gv=gv
vnoremap <silent> <C-k>            :move '<-2<Return>gv=gv
nnoremap          <C-a>            ggVG
nnoremap          +                <C-a>
nnoremap          -                <C-x>
nnoremap          p                ]p
nnoremap          P                ]P
vnoremap          //               y/\V<C-r>=escape(@",'/\')<Return><Return>
vnoremap          ??               y?\V<C-r>=escape(@",'?\')<Return><Return>
noremap  <silent> <C-l>            :set number!<Return>
noremap  <silent> <C-c>            :call NERDComment(0, 'toggle')<Return>
noremap  <silent> <C-n>            :NERDTreeToggle<Return>
noremap           <C-p>            :find<Space>
cnoremap          <C-p>            <Home>vert s<End>
noremap           <C-Left>         <C-w>h
noremap           <C-Right>        <C-w>l
noremap           <C-Down>         <C-w>j
noremap           <C-Up>           <C-w>k
noremap  <silent> <C-s>            :update<Return>
noremap  <silent> <Leader><Leader> :map <Leader><Return>
noremap           <Leader>mm       :make<Return>
noremap           <Leader>mi       :make install<Return>
noremap           <Leader>mc       :make clean<Return>
noremap           <Leader>m<Space> :make<Space>
noremap           <Leader>i        :AddImport<Bar>SortImports<Return>
nnoremap          <Leader>r        :%s///g<Bar>''<Left><Left><Left><Left><Left>
nnoremap          <Leader>n        :%s///gn<Return>
noremap  <silent> <Leader>s        :sort<Return>
noremap  <silent> <Leader>u        :if &mod<Bar>execute 'write !upload'<Bar>else<Bar>execute '!upload '.shellescape(@%)<Bar>endif<Return>
noremap  <silent> <Leader>x        :execute '!chmod +x -- '.shellescape(@%)<Return>

if v:version >= 800
    noremap  <silent> <C-t> :ToggleTerm<Return>
    tnoremap <silent> <C-t> <C-w>:ToggleTerm<Return>
endif

" Autocommands

autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | quit | endif
autocmd BufNewFile,BufRead ~/.dots/bash/* call dist#ft#SetFileTypeSH("bash")
autocmd BufWritePre * %s/\s\+$//e
autocmd BufWritePost * if getline(1) =~ '^#!' && !executable(expand('%:p')) | silent execute '!chmod +x -- '.shellescape(@%) | endif
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" Commands

command! ToggleTerm call ToggleTerm()
command! -nargs=* -bar AddImport call AddImport(<f-args>)
command! SortImports 1/^import /,$?^import ?sort u /^import \+/ | nohlsearch

" Functions

function! ToggleTerm()
    if &buftype == 'terminal'
        close
        return
    endif

    let terminal_windows = filter(getwininfo(), 'v:val.terminal')
    if !empty(terminal_windows)
        execute terminal_windows[0].winnr.'wincmd w'
        return
    endif

    let terminal_buffers = filter(getbufinfo(), 'getbufvar(v:val.bufnr, ''&buftype'') == ''terminal''')
    if !empty(terminal_buffers)
        execute 'botright sbuffer' terminal_buffers[0].bufnr
        return
    endif

    botright terminal ++close ++kill=term ++norestore
endfunction

function! AddImport(...)
    if !exists('$IMPORTPATH')
        echoerr 'IMPORTPATH not set'
        return
    endif

    let $TYPENAME = get(a:, 1, expand('<cword>'))
    let types = systemlist('IFS=: read -ra jars <<< "$IMPORTPATH"; for f in "${jars[@]}"; do jar -tf "$f" 2> /dev/null; done | sed -n ''/\<''"$TYPENAME"''\.class$/{s/\.class$//;s,/,.,g;p}''')

    if len(types) == 0
        return
    elseif len(types) == 1
        let type = types[0]
    else
        for i in range(len(types))
            echo i types[i]
        endfor
        let type = get(types, input('Which type do you want to import? '))
    endif

    let v:errmsg = ''
    silent! $?^import
    if v:errmsg != ''
        silent! $?^package
        normal o
    endif

    put ='import '.type.';'
endfunction
