# Debugging

args() {
    printf '%d\n' "$#"
    if (( $# )); then
        printf '<%s> ' "$@"
        echo
    fi
}

# Files

pwd_short() {
    local pwd='\w' component i prefix
    while IFS= read -rd/ component; do
        i=0
        while
            prefix=${component::++i}
            [[ $prefix == +(.) ]]
        do :; done
        printf %s/ "$prefix"
    done <<< "${pwd@P}"
    printf '%s\n' "$component"
}

cd() {
    builtin cd "$@" && ls
}

mkcd() {
    mkdir -p "$@" && builtin cd "$@"
}

bck() {
    local f
    for f do
        cp -i -- "$f" "$f.bck"
    done
}

unbck() {
    local f
    for f do
        if [[ $f == *.bck ]]; then
            cp -i -- "$f" "${f%.bck}"
        else
            cp -i -- "$f.bck" "$f"
        fi
    done
}

flast() {
    local print_time=0 n=+1 o OPTIND OPTARG
    while getopts :tn: o; do case $o in
        t) print_time=1;;
        n) n=$OPTARG;;
    esac; done; shift "$(( OPTIND - 1 ))"
    find "${@:-.}" -type f -printf '%T@/%P\0' | sort -znst / -k 1,1 | tail -zn "$n" |
    while IFS=/ read -rd '' time path; do
        (( print_time )) && printf '[%(%F %T)T] ' "${time%%.*}"
        printf '%s\n' "$path"
    done
}

# Disk usage

duh() {
    local lines=() total_size size file width=15 bar
    mapfile -t lines < <(command du -ad 1 "$@")
    read -r total_size _ <<< "${lines[-1]}"
    printf '%s\n' "${lines[@]::${#lines[@]}-1}" | sort -nrk 1,1 | while read -r size file; do
        bar=
        (( n = (width + 1) * (size - 1) / total_size))
        for (( i = 0; i < n; i++ )) do bar+='#'; done
        printf '[%-*s] %s\n' "$width" "$bar" "$file"
    done
}

dfb() {
    local width=${COLUMNS:-80} total=0 info=() fields=() source size used avail sub_width bar
    (( $# )) || set -- /dev/sda?
    while read -ra fields; do
        (( total += fields[1] ))
        info+=("${fields[*]}")
    done < <(LC_ALL=C command df --sync --output=source,size,used,avail "$@" | tail -n +2)
    for fields in "${info[@]}"; do
        read -r source size used avail <<< "$fields"
        (( sub_width = (width - 2*${#info[@]}) * size / total ))
        bar=
        (( n = (sub_width + 1) * (used - 1) / size ))
        for (( i = 0; i < n; i++ )) do bar+='#'; done
        printf '[%-*s]' "$sub_width" "$bar"
    done
    echo
}

# Streams

sponge() {
    local tmp
    tmp=$(mktemp) || return 1
    cat > "$tmp"; cat -- "$tmp"
    rm -f -- "$tmp"
}

unfold() {
    tr -s '[:space:]' '[ *]'
}

clipuf() {
    clip | unfold | clip
}

clipcmd_helper () {
    local cmd
    local -a lines
    read -r _ _ cmd < <(history 1)
    mapfile lines < <(LC_ALL=en_US.UTF-8 eval "$cmd" 2>&1)
    printf %s "${lines[@]}"
    {
        printf '$ %s\n' "$cmd"
        printf %s "${lines[@]}"
    } | xsel -b -i
}; alias clipcmd='clipcmd_helper # '

# SSH

attassh() {
    local host=$1 session=$2
    ssh -t "$host" screen -r "$session"
}

sshesc() {
    local args=() interactive=0 cmd
    while (( $# )); do
        if [[ $1 == -i ]]; then
            interactive=1
        elif [[ $1 == -- ]]; then
            shift
            if (( interactive )); then
                cmd=$*
                args=(-qt "${args[@]}" bash -lic "${cmd@Q}")
            else
                args+=("${@@Q}")
            fi
            break
        else
            args+=("$1")
        fi
        shift
    done
    ssh "${args[@]}"
}

# Network

myip() {
    dig +short myip.opendns.com @resolver1.opendns.com
}

http() {
    local port password source=${1-.} tmpdir response_fifo
    read -rp "Port? " port
    port=${port:-4242}
    if [[ -d $1 ]]; then
        read -rsp "Password? " password
        echo
        caddy -conf=<(echo ":${port:-12345}"; echo browse; [[ $password ]] && echo "basicauth / naim $password") ${1+-root="$1"}
    elif [[ -x $1 ]]; then
        [[ $source == */* ]] || source=./$source
        tmpdir=$(mktemp --tmpdir -d http-XXXXX) || return 1
        response_fifo=$tmpdir/reponse
        mkfifo "$response_fifo" || return 1
        echo "Serving $source at http://localhost:$port"
        while
            nc -l -p "$port" -N < "$response_fifo" | "$source" > "$response_fifo"
        do :; done
    else
        echo "Invalid source." >&2
    fi
}

# Misc

remind() {
    local delay=$1
    shift
    {
        sleep "$delay"
        exec dunstify -i dialog-info -t 10000 "$*"
    } &> /dev/null & disown
}

insist() {
    local command=("$@")
    until "${command[@]}"; do sleep 0.1; done
}

what() {
    local thing=$1 path
    if [[ $thing == */* ]]; then
        pacman -Fo "$thing" ||
        pacman -Fo "$(realpath "$thing")"
    else
        path=$(type -P "$thing") || path=/usr/bin/$thing
        pacman -Fo "$path"
    fi
}

whatdoes() {
    local command=$1 thing=$2 before=
    if [[ $thing == -* ]]; then
        before='^[[:space:]]*'
    fi
    man -P "less +/${before@Q}\\\\C${thing@Q}" "$command"
}

efibootorder() {
    local field value boot_order=() boot_entries=()
    while read -r field value; do
        if [[ $field == BootOrder: ]]; then
            IFS=, read -ra boot_order <<< "$value"
        elif [[ $field =~ ^Boot([0-9A-F]+) ]]; then
            boot_entries[16#${BASH_REMATCH[1]}]=$value
        fi
    done < <(efibootmgr)
    for i in "${boot_order[@]}"; do
        printf -- '- %s\n' "${boot_entries[16#$i]}"
    done
}
